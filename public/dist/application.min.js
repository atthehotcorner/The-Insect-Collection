"use strict";var ApplicationConfiguration=function(){var applicationModuleName="theInsectCollection",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","google-maps".ns(),"angularFileUpload","ui.tinymce"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).config(["GoogleMapApiProvider".ns(),function(GoogleMapApi){GoogleMapApi.configure({v:"3.17",libraries:"weather,geometry,visualization"})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("collections"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("insects"),ApplicationConfiguration.registerModule("notes"),ApplicationConfiguration.registerModule("users"),angular.module("collections").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Collections","collections","dropdown","/collections(/create)?"),Menus.addSubMenuItem("topbar","collections","List Collections","collections",null,!0,null,null,"See everyone's collections"),Menus.addSubMenuItem("topbar","collections","New Collection","collections/create",null,!1,null,null,"Create a virtual insect collection.")}]),angular.module("collections").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCollections",{url:"/collections",templateUrl:"modules/collections/views/list-collections.client.view.html"}).state("createCollection",{url:"/collections/create",templateUrl:"modules/collections/views/create-collection.client.view.html"}).state("viewCollection",{url:"/collections/:collectionId",templateUrl:"modules/collections/views/view-collection.client.view.html"}).state("editCollection",{url:"/collections/:collectionId/edit",templateUrl:"modules/collections/views/edit-collection.client.view.html"})}]),angular.module("collections").controller("CollectionsController",["$state","$scope","$http","$stateParams","$location","Authentication","Collections","Insects",function($state,$scope,$http,$stateParams,$location,Authentication,Collections,Insects){$scope.authentication=Authentication,$scope.createPage=function(){$scope.authentication.user||$location.path("/collections"),$scope.loading=!0,$scope.commentsEnabled=!0,$scope.insects=[],$scope.selectedInsects=[],$scope.insects=Insects.query({limit:100},function(){$scope.loading=!1}),$scope.addInsect=function(){var insectId=this.insect._id,index=$scope.selectedInsects.indexOf(insectId);-1===index?$scope.selectedInsects.push(insectId):$scope.selectedInsects.splice(index,1)}},$scope.create=function(){var collection=new Collections({name:this.name,description:this.description,caught:$scope.selectedInsects});collection.$save(function(response){$location.path("collections/"+response._id),$scope.name="",$scope.description="",$scope.selectedInsects=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(collection){if(collection){collection.$remove();for(var i in $scope.collections)$scope.collections[i]===collection&&$scope.collections.splice(i,1)}else $scope.collection.$remove(function(){$location.path("collections")})},$scope.updatePage=function(){$scope.authentication.user||$location.path("/collections"),$scope.loading=!0,$scope.insectModel={},$scope.insects=[],$scope.selectedInsects=[],$scope.addInsect=function(insect){var index=$scope.selectedInsects.indexOf(insect._id);-1===index?$scope.selectedInsects.push(insect._id):$scope.selectedInsects.splice(index,1)},$scope.collection=Collections.get({collectionId:$stateParams.collectionId},function(){for(var i=0;i<$scope.collection.caught.length;i++)$scope.selectedInsects.push($scope.collection.caught[i]._id),$scope.insectModel[$scope.collection.caught[i]._id]=!0;$scope.insects=Insects.query({limit:100},function(){$scope.loading=!1})})},$scope.update=function(){var collection=new Collections({_id:$scope.collection._id,name:$scope.collection.name,description:$scope.collection.description,commentsEnabled:$scope.collection.commentsEnabled,caught:$scope.selectedInsects});collection.$update(function(){$location.path("collections/"+collection._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.loading=!0,$scope.collections=Collections.query(function(){$scope.loading=!1})},$scope.findOne=function(){$scope.loading=!0,$scope.collection=Collections.get({collectionId:$stateParams.collectionId},function(){$scope.loading=!1}),$scope.comment={content:"",add:function(){$http.post("/collections/"+$scope.collection._id+"/comment/",{content:$scope.comment.content}).success(function(){$state.go($state.$current,null,{reload:!0})}).error(function(data){$scope.comment.error=data.message})}}}}]),angular.module("collections").factory("Collections",["$resource",function($resource){return $resource("collections/:collectionId",{collectionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$location","Insects","GoogleMapApi".ns(),"Authentication",function($scope,$location,Insects,GoogleMapApi,Authentication){$scope.authentication=Authentication,Insects.get({count:1},function(data){$scope.totalInsects=data.count}),$scope.map={center:{latitude:29.6398801,longitude:-82.3551082},zoom:15,gmap:null,bounds:{},options:{scrollwheel:!1,streetViewControl:!1}},$scope.markers=[],GoogleMapApi.then(function(){var markersTemp=[],markers=function(i,insect){var marker={id:insect._id,latitude:insect.loc.coordinates[1],longitude:insect.loc.coordinates[0],options:{icon:{url:insect.image.small,scaledSize:new google.maps.Size(50,50)}},name:insect.name,scientificName:insect.scientificName,user:insect.user,dateFound:insect.dateFound,locationTitle:insect.locationTitle};return marker};Insects.query({limit:10},function(insects){for(var i=0;i<insects.length;i++)markersTemp.push(markers(i,insects[i]))}),$scope.markers=markersTemp})}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position,hilit){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender,hilight:hilit}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position,hilit){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender,hilight:hilit});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",!0,null)}]),angular.module("groups").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Groups & Classes","groups","dropdown","(/groups(/classes)?||/groups(/create)?)",!1,null,9,"test"),Menus.addSubMenuItem("topbar","groups","List Groups","groups",null,!0,null,null,"View all groups."),Menus.addSubMenuItem("topbar","groups","List Classes","groups/classes",null,!0,null,null,"View all classes."),Menus.addSubMenuItem("topbar","groups","New Group","groups/create",null,!0,null,null,"Create a group for collabration.")}]),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("listClasses",{url:"/groups/classes",templateUrl:"modules/groups/views/list-classes.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("GroupsController",["$scope","$http","$stateParams","$location","Authentication","Groups","Insects",function($scope,$http,$stateParams,$location,Authentication,Groups,Insects){$scope.authentication=Authentication,$scope.create=function(){var group=new Groups({name:this.name,description:this.description,type:this.type});group.$save(function(response){$location.path("groups/"+response._id),$scope.name="",$scope.description="",$scope.type=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(group){if(group){group.$remove();for(var i in $scope.groups)$scope.groups[i]===group&&$scope.groups.splice(i,1)}else $scope.group.$remove(function(){$location.path("groups")})},$scope.update=function(){var group=$scope.group;group.$update(function(){$location.path("groups/"+group._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findGroup=function(){$scope.loading=!0,$scope.groups=Groups.query({type:"Group"},function(){$scope.loading=!1},function(err){$scope.loading=!1,$scope.error=err.data.message})},$scope.findClass=function(){$scope.loading=!0,$scope.groups=Groups.query({type:"Class"},function(){$scope.loading=!1},function(err){$scope.loading=!1,$scope.error=err.data.message})},$scope.findOne=function(){$scope.loading=!0,Groups.get({groupId:$stateParams.groupId},function(data){$scope.loading=!1,$scope.group=data.data,$scope.membersList=data.membersList,$scope.insects=data.insects,$scope.collections=data.collections},function(err){$scope.loading=!1,$scope.error=err.data.message})},$scope.addMember=function(){var group=$scope.group;group.members.push(this.member),group.$update(function(){$location.path("groups/"+group._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.joinGroup=function(){for(var group=$scope.group,isMember=!1,i=0;i<group.members.length;i++)group.members[i]._id===$scope.authentication.user._id&&(isMember=!0);isMember||group.members.push($scope.authentication.user),group.$joinGroup(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find2=function(){$scope.slides=[10];$scope.insects=Insects.query()},$scope.leaveGroup=function(){for(var group=$scope.group,i=0;i<group.members.length;i++)group.members[i]._id===$scope.authentication.user._id&&group.members.splice(i,1);group.$joinGroup(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.showPath=function(path){$location.path(path)}}]),angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("groups/:groupId",{groupId:"@_id"},{joinGroup:{method:"POST"},update:{method:"PUT"}})}]),angular.module("insects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Insects","insects","dropdown","/insects(/create)?",!0,null,-1),Menus.addSubMenuItem("topbar","insects","All Insects","insects",null,!0,null,null,"See everyone's insects."),Menus.addSubMenuItem("topbar","insects","View Map","insects/map",null,!0,null,null,"Look around to see where insects were caught."),Menus.addSubMenuItem("topbar","insects","New Insect","insects/create",null,!1,null,null,"Create your insect.")}]),angular.module("insects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listInsects",{url:"/insects",templateUrl:"modules/insects/views/list-insects.client.view.html"}).state("listInsectsSkip",{url:"/insects/skip/:skip",templateUrl:"modules/insects/views/list-insects.client.view.html"}).state("listInsectsOfUser",{url:"/insects/user/:userId",templateUrl:"modules/insects/views/list-insects.client.view.html"}).state("listInsectsOfUserSkip",{url:"/insects/user/:userId/skip/:skip",templateUrl:"modules/insects/views/list-insects.client.view.html"}).state("createInsect",{url:"/insects/create",templateUrl:"modules/insects/views/create-insect.client.view.html"}).state("viewMap",{url:"/insects/map",templateUrl:"modules/insects/views/view-map.client.view.html"}).state("viewMapOfUser",{url:"/insects/map/user/:userId",templateUrl:"modules/insects/views/view-map.client.view.html"}).state("viewInsect",{url:"/insects/:insectsId",templateUrl:"modules/insects/views/view-insect.client.view.html"}).state("editInsect",{url:"/insects/:insectsId/edit",templateUrl:"modules/insects/views/edit-insect.client.view.html"})}]),angular.module("insects").controller("InsectsController",["$state","$scope","$http","$upload","$stateParams","$location","Authentication","Insects","GoogleMapApi".ns(),function($state,$scope,$http,$upload,$stateParams,$location,Authentication,Insects,GoogleMapApi){$scope.authentication=Authentication,$scope.createPage=function(){$scope.authentication.user||$location.path("/insects"),$scope.form={loc:{coordinates:{latitude:"",longitude:""}},commentsEnabled:!0,validationEnabled:!0,dateFound:new Date,isValid:!1,reviewForm:!1,uploadingForm:!1,progress:{current:0,max:100,type:"info",task:"Uploading",active:!0},coordsSet:!1,cancel:function(){$location.path("insects")},reset:function(){$scope.form.progress.current=0,$scope.form.reviewForm=!1,$scope.form.uploadingForm=!1,$scope.form.progress.active=!0,$scope.form.progress.task="Uploading"}},$scope.map={center:{latitude:29.6398801,longitude:-82.3551082},zoom:15,moveMarker:null,gmap:{},bounds:{},options:{scrollwheel:!0,streetViewControl:!1}},$scope.marker={id:0,coords:{latitude:29.6398801,longitude:-82.3551082},options:{draggable:!0},events:{dragend:function(marker){$scope.$apply(function(){$scope.form.loc.coordinates.latitude=marker.getPosition().lat(),$scope.form.loc.coordinates.longitude=marker.getPosition().lng(),$scope.form.coordsSet=!0})}}},$scope.datePicker={options:{formatYear:"yyyy",startingDay:0},format:"MMMM d, yyyy",minDate:null,maxDate:new Date,clear:function(){$scope.dt=null},open:function($event){$event.preventDefault(),$event.stopPropagation(),$scope.datePicker.opened=!0}}},$scope.create=function(){$scope.form.reviewForm=!1,$scope.form.uploadingForm=!0,$scope.form.progress.type="info";var insect=new Insects({name:this.form.name,galleryName:this.form.galleryName,scientificName:this.form.scientificName,description:this.form.description,dateFound:this.form.dateFound,commentsEnabled:this.form.commentsEnabled,validationEnabled:this.form.validationEnabled,locationTitle:this.form.locationTitle,loc:{coordinates:[this.form.loc.coordinates.longitude,this.form.loc.coordinates.latitude]}});$upload.upload({url:"/insects",method:"POST",file:this.form.image,data:insect}).progress(function(evt){$scope.form.progress.current=parseInt(75*evt.loaded/evt.total,10),75===$scope.form.progress.current&&($scope.form.progress.task="Processing")}).success(function(response){$scope.form.progress.current=100,$location.path("insects/"+response._id),$scope.form.name="",$scope.form.galleryName="",$scope.form.scientificName="",$scope.form.description="",$scope.form.dateCreated=new Date,$scope.form.commentsEnabled=!0,$scope.form.validationEnabled=!0,$scope.form.locationTitle="",$scope.form.loc.coordinates.latitude="",$scope.form.loc.coordinates.longitude="",$scope.form.image="",$scope.form.isValid=!1,$scope.form.reviewForm=!1,$scope.form.uploadingForm=!1,$scope.form.progress.current=0,$scope.form.progress.type="success",$scope.form.coordsSet=!1}).error(function(data){$scope.error=data.message,$scope.form.progress.active=!1,$scope.form.progress.type="warning"})},$scope.remove=function(insect){if(insect){insect.$remove();for(var i in $scope.insects)$scope.insects[i]===insect&&$scope.insects.splice(i,1)}else $scope.insect.$remove(function(){$location.path("insects")})},$scope.find=function(){function fetch(skip,firstRun){$scope.loading=!0,$stateParams.hasOwnProperty("userId")?($scope.insects=Insects.query({userId:$stateParams.userId,skip:skip},function(){$scope.loading=!1}),Insects.get({userId:$stateParams.userId,count:1},function(data){$scope.foundUser=data.user,$scope.pagination.totalItems=data.count})):($scope.insects=Insects.query({limit:12,skip:skip},function(){$scope.loading=!1}),Insects.get({count:1},function(data){$scope.count=data,$scope.pagination.totalItems=data.count,firstRun&&($scope.pagination.currentPage=parseInt(skip/data.count*12,10))}))}$scope.loading=!0;var skip=0;$stateParams.hasOwnProperty("skip")&&parseInt($stateParams.skip,10)>=0&&(skip=parseInt($stateParams.skip,10)),fetch(skip,!0),$scope.pagination={totalItems:0,currentPage:0,itemsPerPage:12,pageChanged:function(){fetch(12*($scope.pagination.currentPage-1))}}},$scope.findOne=function(){$scope.loading=!0,$scope.insect=Insects.get({insectId:$stateParams.insectsId},function(insect){$scope.insectMap={center:{latitude:insect.loc.coordinates[1],longitude:insect.loc.coordinates[0]},zoom:15,bounds:{},options:{scrollwheel:!0,streetViewControl:!1}},$scope.insectMarker={id:0,coords:{latitude:insect.loc.coordinates[1],longitude:insect.loc.coordinates[0]},options:{draggable:!1}},$scope.loading=!1},function(){$scope.insect404=!0,$scope.loading=!1}),$scope.insectDownload=function(size){$http.get("/insects/"+$scope.insect._id+"/download/"+size).success(function(data){window.open(data)}).error(function(data){$scope.error=data.message})},$scope.generatePDF=function(){var docDefinition={content:[{text:"Insect Guide",style:"header"},{style:"table",table:{widths:[200,"*"],body:[[{text:"Photo",style:"tableHeader"},{text:"Infomation",style:"tableHeader"}],[{image:$scope.insect.image.large,width:200},{table:{body:[[{text:"Name",bold:!0},$scope.insect.name],[{text:"Scientific Name",bold:!0},$scope.insect.scientificName],[{text:"Description",bold:!0},$scope.insect.description],[{text:"Caught By",bold:!0},$scope.insect.user.displayName],[{text:"Date Found",bold:!0},$scope.insect.dateFound],[{text:"Location Found",bold:!0},$scope.insect.locationTitle],[{text:"Coordinates",bold:!0},$scope.insect.loc.coordinates[0]+", "+$scope.insect.loc.coordinates[1]]]},layout:"noBorders"}]]},layout:"lightHorizontalLines"}],styles:{header:{fontSize:18,bold:!0,margin:[0,0,0,10]},subheader:{fontSize:16,bold:!0,margin:[0,10,0,5]},table:{margin:[0,5,0,15]},tableHeader:{bold:!0,fontSize:13,color:"black"}}};pdfMake.createPdf(docDefinition).download()},$scope.comment={content:"",add:function(){$http.post("/insects/"+$scope.insect._id+"/comment/",{content:$scope.comment.content}).success(function(){$state.go($state.$current,null,{reload:!0})}).error(function(data){$scope.comment.error=data.message})}}},$scope.findOneEdit=function(){$scope.insect=Insects.get({insectId:$stateParams.insectsId})},$scope.update=function(){var insect=new Insects({_id:$scope.insect._id,name:$scope.insect.name,scientificName:$scope.insect.scientificName,description:$scope.insect.description,commentsEnabled:$scope.insect.commentsEnabled,locationTitle:$scope.insect.locationTitle});insect.$update(function(){$location.path("insects/"+insect._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.map=function(){$stateParams.hasOwnProperty("userId")&&Insects.get({userId:$stateParams.userId,count:1},function(data){$scope.foundUser=data.user}),$scope.map={center:{latitude:29.6398801,longitude:-82.3551082},zoom:16,gmap:null,bounds:{},options:{scrollwheel:!0,streetViewControl:!1}},$scope.markers=[],$scope.markersIds=[],GoogleMapApi.then(function(){var markers=function(i,insect){var marker={id:insect._id,latitude:insect.loc.coordinates[1],longitude:insect.loc.coordinates[0],options:{icon:{url:insect.image.small,scaledSize:new google.maps.Size(50,50)}},name:insect.name,scientificName:insect.scientificName,user:insect.user,dateFound:insect.dateFound,locationTitle:insect.locationTitle};return marker};$scope.$watch(function(){return $scope.map.bounds},function(nv,ov){$scope.loading=!0;var markersTemp=[],markersIdsTemp=[];if(!ov.southwest&&nv.southwest||ov.southwest&&nv.southwest){var boxBounds={bounds:{southwest:[$scope.map.bounds.southwest.longitude,$scope.map.bounds.southwest.latitude],northeast:[$scope.map.bounds.northeast.longitude,$scope.map.bounds.northeast.latitude]},fetched:JSON.stringify($scope.markersIds),limit:50};$stateParams.hasOwnProperty("userId")&&(boxBounds.userId=$stateParams.userId),Insects.query(boxBounds,function(insects){for(var i=0;i<insects.length;i++)-1===$scope.markersIds.indexOf(insects[i]._id)&&(markersTemp.push(markers(i,insects[i])),markersIdsTemp.push(insects[i]._id));$scope.markers=$scope.markers.concat(markersTemp),$scope.markersIds=$scope.markersIds.concat(markersIdsTemp),$scope.loading=!1})}},!0)})}}]),angular.module("insects").directive("validFile",[function(){return{require:"ngModel",link:function(scope,element,attrs,ngModel){element.bind("change",function(){scope.$apply(function(){ngModel.$setViewValue(element.val()),ngModel.$render()})})}}}]),angular.module("insects").factory("Insects",["$resource",function($resource){return $resource("insects/:insectId",{insectId:"@_id"},{update:{method:"PUT"}})}]),angular.module("notes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Field Notes","notes","dropdown","/notes(/create)?",!1,null,2),Menus.addSubMenuItem("topbar","notes","List Field Notes","notes",null,!0,null,null,"See your assignments"),Menus.addSubMenuItem("topbar","notes","New Field Note","notes/create",null,!0,null,null,"Log your insect collecting")}]),angular.module("notes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listNotes",{url:"/notes",templateUrl:"modules/notes/views/list-notes.client.view.html"}).state("createNote",{url:"/notes/create",templateUrl:"modules/notes/views/create-note.client.view.html"}).state("viewNote",{url:"/notes/:noteId",templateUrl:"modules/notes/views/view-note.client.view.html"}).state("editNote",{url:"/notes/:noteId/edit",templateUrl:"modules/notes/views/edit-note.client.view.html"})}]),angular.module("notes").controller("NotesController",["$scope","$stateParams","$location","Authentication","Notes","Insects",function($scope,$stateParams,$location,Authentication,Notes,Insects){$scope.authentication=Authentication,$scope.createPage=function(){$scope.insects=[],$scope.insects=Insects.query({limit:100,userId:Authentication.user._id})},$scope.create=function(){for(var ids=[],i=0;i<this.selectedInsects.length;i++)ids.push(this.selectedInsects[i]._id);var note=new Notes({title:this.title,content:this.content,insects:ids});note.$save(function(response){$location.path("notes/"+response._id),$scope.title="",$scope.content="",$scope.selectedInsects=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(note){if(note){note.$remove();for(var i in $scope.notes)$scope.notes[i]===note&&$scope.notes.splice(i,1)}else $scope.note.$remove(function(){$location.path("notes")})},$scope.updatePage=function(){$scope.insects=[],$scope.insects=Insects.query({limit:100,userId:Authentication.user._id})},$scope.update=function(){for(var ids=[],i=0;i<this.selectedInsects.length;i++)ids.push(this.selectedInsects[i]._id);var note=new Notes({_id:$scope.note._id,name:$scope.note.title,content:$scope.note.content,insects:ids});note.$update(function(){$location.path("notes/"+note._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.loading=!0,$scope.notes=Notes.query(function(){$scope.loading=!1})},$scope.findOne=function(){$scope.loading=!0,$scope.note=Notes.get({noteId:$stateParams.noteId},function(){$scope.loading=!1},function(err){$scope.error=err.data.message,$scope.loading=!1})}}]),angular.module("notes").factory("Notes",["$resource",function($resource){return $resource("notes/:noteId",{noteId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Users","users","dropdown","/users(/list)?",!1,null,10),Menus.addSubMenuItem("topbar","users","All Users","users/list",null,!0,null,null,"See all bug collectors"),Menus.addSubMenuItem("topbar","users","My Profile","profile/",null,!0,null,null,"About you")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("editProfile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("profile",{url:"/profile",templateUrl:"modules/users/views/profile/profile.client.view.html"}).state("viewProfile",{url:"/profile/:userId",templateUrl:"modules/users/views/profile/profile.client.view.html"}).state("listUsers",{url:"/users/list",templateUrl:"modules/users/views/profile/list-users.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ProfileController",["$scope","$http","$stateParams","$location","Users","Collections","Authentication",function($scope,$http,$stateParams,$location,Users,Collections,Authentication){$scope.user=Authentication.user,$scope.showPath=function(path){$location.path(path)},$scope.listUsers=function(){$http.get("/users/list").success(function(data){$scope.users=data}).error(function(data){$scope.error=data.message})},$scope.findUser=function(){$scope.loading=!0,$scope.collectionsloading=!0;var userId=$stateParams.userId;""===$stateParams.userId&&(userId=Authentication.user._id),$scope.foundUser=Users.get({userId:userId},function(){$scope.loading=!1}),$scope.collections=Collections.query({userId:userId},function(){$scope.collectionsloading=!1})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$location.path("/profile/")},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message
})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{insectId:"@_id"},{update:{method:"PUT"}})}]);